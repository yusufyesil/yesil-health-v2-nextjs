"use client";

import { useState } from "react";
import ReactMarkdown from "react-markdown";
import { SendHorizontal, Bot, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";

interface Message {
  role: "user" | "assistant";
  content: string;
  consultations?: string[];
}

export function YesilAIChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [expandedConsultations, setExpandedConsultations] = useState<number[]>([]);
  const [selectedMessageIndex, setSelectedMessageIndex] = useState<number | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    setInput("");
    setMessages((prev) => [...prev, { role: "user", content: userMessage }]);
    setIsLoading(true);

    try {
      const response = await fetch("http://4.227.153.5:8000/consult", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ question: userMessage }),
      });

      const data = await response.json();

      const finalResponse =
        data.final_consultation || "I apologize, but I couldn't process your request.";
      const consultations = data.specialty_responses
        ? Object.entries(data.specialty_responses).map(
            ([specialty, response]) => `**${specialty}:** ${response}`
          )
        : [];

      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: finalResponse,
          consultations,
        },
      ]);
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: "I apologize, but I encountered an error while processing your request. Please try again.",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleConsultation = (messageIndex: number) => {
    setExpandedConsultations((prev) =>
      prev.includes(messageIndex)
        ? prev.filter((i) => i !== messageIndex)
        : [...prev, messageIndex]
    );
  };

  const handleSelectMessage = (index: number) => {
    setSelectedMessageIndex(index);
  };

  return (
    <div className="flex flex-col h-[calc(100vh-12rem)] max-w-3xl mx-auto">
      <ScrollArea className="flex-1 p-4 rounded-t-lg bg-card">
        <div className="space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={cn(
                "flex flex-col max-w-[80%] rounded-lg p-4",
                message.role === "user"
                  ? "ml-auto bg-primary text-primary-foreground"
                  : "bg-muted"
              )}
              onClick={() => handleSelectMessage(index)}
            >
              <div className="flex items-start gap-2">
                {message.role === "assistant" && <Bot className="h-5 w-5 mt-1" />}
                <div className="flex-1">
                  {/* Render markdown for assistant messages */}
                  <ReactMarkdown className="prose text-sm">{message.content}</ReactMarkdown>
                  {message.consultations && message.consultations.length > 0 && (
                    <div className="mt-2">
                      <Button
                        variant="secondary"
                        size="sm"
                        onClick={() => toggleConsultation(index)}
                        className="text-xs"
                      >
                        {expandedConsultations.includes(index)
                          ? "Hide Consultations"
                          : "View Consultations"}
                      </Button>
                      {expandedConsultations.includes(index) && (
                        <div className="mt-2 space-y-2">
                          {message.consultations.map((consultation, i) => (
                            <ReactMarkdown
                              key={i}
                              className="text-xs bg-background/50 p-2 rounded"
                            >
                              {consultation}
                            </ReactMarkdown>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex items-center gap-2 text-muted-foreground">
              <Loader2 className="h-4 w-4 animate-spin" />
              <span className="text-sm">Yesil AI is thinking...</span>
            </div>
          )}
        </div>
      </ScrollArea>

      <form
        onSubmit={handleSubmit}
        className="p-4 bg-card border-t flex gap-2 items-end rounded-b-lg"
      >
        <Textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Ask about your health concerns..."
          className="min-h-[60px] resize-none"
          onKeyDown={(e) => {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              handleSubmit(e);
            }
          }}
        />
        <Button
          type="submit"
          size="icon"
          disabled={isLoading || !input.trim()}
          className="shrink-0"
        >
          <SendHorizontal className="h-5 w-5" />
        </Button>
      </form>
    </div>
  );
}
